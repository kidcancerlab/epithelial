# Set up automated cell type annotation

```{r}
lung_ref <- qs::qread("LungRefs/normal_lung.qs")
lung_ref$free_annotation <-
    stringr::str_replace_all(lung_ref$free_annotation,
        c("/" = "_", "\\+" = "_plus"))
lung_ref$free_annotation <-
    stringr::str_replace_all(lung_ref$free_annotation,
        c("Alveolar Epithelial Type 1" = "Alveolar Epithelial",  #nolint
            "Alveolar Epithelial Type 2" = "Alveolar Epithelial",  #nolint
            "Basophil_Mast 1" = "Basophil_Mast",
            "Basophil_Mast 2" = "Basophil_Mast",
            "Bronchial Vessel 1" = "Bronchial Vessel",
            "Bronchial Vessel 2" = "Bronchial Vessel",
            "IGSF21_plus Dendritic" = "Dendritic cells",
            "Myeloid Dendritic Type 1" = "Myeloid Dendritic",   #nolint
            "Myeloid Dendritic Type 2" = "Myeloid Dendritic",   #nolint
            "Natural Killer" = "NK cells",
            "Natural Killer T" = "NKT",
            "NK cells T" = "NKT",
            "CD4_plus Memory/Effector T" = "CD4+ T cells",
            "CD4_plus Naive T" = "CD4+ T cells",
            "CD8_plus Memory_Effector T" = "CD8+ T cells",
            "CD8_plus Naive T" = "CD8+ T cells",
            "Proliferating NK_T" = "NKT",
            "TREM2_plus Dendritic" = "Dendritic cells",
            "Proliferating Macrophage" = "Macrophage",
            "Nonclassical Monocyte" = "Monocytes",
            "Classical Monocyte" = "Monocytes"))

mets_ref <- qs::qread("LungRefs/human_lung_met_ref.qs")

annotate <- function(sobject,
    aggr_ref = TRUE,
    label_type = "label.main",
    ...) {
        # hpca <- celldex::HumanPrimaryCellAtlasData()
        # hpca$label.main <-
        #     stringr::str_replace_all(hpca$label.main,
        #         c("T_cells" = "T cells",
        #         "B_cell" = "B cells",
        #         "NK_cell" = "NK cells",
        #         "Monocyte" = "Monocytes",
        #         "DC" = "Dendritic cells"))
        # huim <- celldex::MonacoImmuneData()
        # ref3 <- GetAssayData(lung_ref)
        ref <- list(mets_ref)
        labels <- list(
            # hpca[[label_type]],
            # huim[[label_type]],
            # lung_ref$free_annotation,
            mets_ref$label)
        annotation <-
            SingleR::SingleR(test = Seurat::as.SingleCellExperiment(sobject),
                ref = ref,
                labels = labels,
                aggr.ref = aggr_ref,
                BPPARAM = BiocParallel::MulticoreParam(
                    parallelly::availableCores()),
                ...)
        sobject$annotations <- annotation$labels
        sobject$cell_scores <-
            apply(X = annotation$scores,
                MARGIN = 1,
                function(x) max(x, na.rm = TRUE))
        return(sobject)
    }
```

# Load the normal human lung data
GSE227136 contains a very large control normal lung dataset. We will extract normal lung scRNA-seq from this.

The download will contain a subset of the normal lung tissue samples, balanced for whole cell and nucleus based RNAseq, from the Human Lung Cell Atlas project.

NOTE: If you haven't already downloaded and processed, you might need to run this step on a himem node.

```{r}
# if(!file.exists("hlca/nl_lung.qs")) {
#     if (!file.exists("~/lab/GenRef/sc_ref_datasets/human/hlca.qs")) {
#         options(
#             reticulate.conda_binary = "/gpfs0/export/apps/easybuild/software/Miniconda3/4.9.2/condabin/conda",
#             SCP_env_name = "r")
#         library(SCP)
#         library(reticulate)
#         sc <- import("scanpy")

#         # Download the annotated full dataset from the Human Lung Cell Atlas project
#         # https://doi.org/10.1038/s41591-023-02327-2
#         system(
#             "curl https://datasets.cellxgene.cziscience.com/3ab47484-a3eb-4f6a-beea-670e1a8fc1e8.h5ad --output ~/lab/GenRef/sc_ref_datasets/human/hlca.h5ad"
#         )

#         # Need to invoke BPCells to handle the large object until we simplify
#         hlca.data <- BPCells::open_matrix_anndata_hdf5(
#             path = "~/rxr014/hlca.h5ad"
#         )

#         # Write the matrix to a directory
#         BPCells::write_matrix_dir(mat = hlca.data, dir = "hlca/")

#         # Now that we have the matrix on disk, we can load it
#         hlca.mat <- BPCells::open_matrix_dir(dir = "hlca/")
#         hlca.mat <- Azimuth:::ConvertEnsembleToSymbol(mat = hlca.mat, species = "human")
#         hlca.meta <- Azimuth::LoadH5ADobs("~/rxr014/hlca.h5ad")

#         # Create Seurat object (just metadata and raw counts)
#         hlca <- SeuratObject::CreateSeuratObject(counts = hlca.mat, meta.data = hlca.meta)

#         # Write the simplified Seurat object
#         qs::qsave(hlca, "~/lab/GenRef/sc_ref_datasets/human/hlca.qs")

#     } else {
#         hlca <- qs::qread("~/lab/GenRef/sc_ref_datasets/human/hlca.qs")
#     }

#     cases <- as.data.frame(hlca@meta.data) %>%
#         select(
#             sample,
#             age_or_mean_of_age_range,
#             smoking_status,
#             subject_type,
#             tissue,
#             lung_condition,
#             assay,
#             fresh_or_frozen
#             ) %>%
#         filter(
#             !tissue %in% c("respiratory airway", "nose"),
#             lung_condition == "Healthy",
#             assay == "10x 3' v3",
#             age_or_mean_of_age_range > 1,
#             smoking_status != 0
#             ) %>%
#         unique()

#     table(cases$fresh_or_frozen)

#     nl_lung <- subset(hlca, subset = sample %in% cases$sample)
#     nl_lung$type <- "Healthy"

#     nl_lung <- SplitObject(nl_lung, split.by = "sample")

#     qs::qsave(nl_lung, "hlca/nl_lung.qs")

# } else {
#     nl_lung <- qs::qread("hlca/nl_lung.qs")
# }

nl_lung <- qs::qread("LungRefs/hlca_healthy_sample.qs")
nl_lung$type <- "Healthy"
```

# Load the osteosarcoma lung metastases

```{r}
if(!file.exists("output/rdata/met_lungs.qs")) {
    mets_meta <- tribble(
        ~file, ~Sample_Name, ~Sample_Source, ~Sample_Type, ~method,
        "~/lab/Counts/S0058/outs/filtered_feature_bc_matrix/", "S0058", "Roberts Lab", "Metastasis", "cell",
        "~/lab/Counts/S0059/outs/filtered_feature_bc_matrix/", "S0059", "Roberts Lab", "Metastasis", "cell",
        "~/lab/Counts/S0217/filtered_feature_bc_matrix", "S0217", "Roberts Lab", "Metastasis", "nucleus",
        "~/lab/Counts/S0218/filtered_feature_bc_matrix", "S0218", "Roberts Lab", "Metastasis", "nucleus",
        "~/lab/Counts/SC069/filtered_feature_bc_matrix/", "SC069", "Roberts Lab", "Metastasis", "nucleus",
        "~/lab/Counts/SC072/filtered_feature_bc_matrix/", "SC072", "Roberts Lab", "Metastasis", "nucleus",
        "~/lab/Counts/SC073/filtered_feature_bc_matrix/", "SC073", "Roberts Lab", "Metastasis", "nucleus")

    met_lung <- mclapply(1:nrow(mets_meta),
        function(m) {
            message(paste("Starting to load", mets_meta$Sample_Name[m], "..."))
            s <- tenx_load_qc(mets_meta$file[m], violin_plot = FALSE) %>%
                NormalizeData()
            s$id <- mets_meta$Sample_Name[m]
            s$src <- mets_meta$Sample_Source[m]
            s$type <- mets_meta$Sample_Type[m]
            s$method <- mets_meta$method[m]
            message(paste(mets_meta$Sample_Name[m], "completed."))
            return(s)
        }, mc.cores = parallelly::availableCores())
    names(met_lung) <- mets_meta$Sample_Name

    # Add samples from the Soragnyi lab (ALSF scPCA)
    # cite https://doi.org/10.1101/2023.05.25.542375
    mets_meta2 <- tribble(
        ~file, ~Sample_Name, ~Sample_Source, ~Sample_Type, ~method,
        "../../../ExternalData/alsf/Soragni/SCPCS000522/SCPCL000854_filtered.rds", "SCPCS000522", "ALSF", "Metastasis", "cell",
        "../../../ExternalData/alsf/Soragni/SCPCS000523/SCPCL000855_filtered.rds", "SCPCS000523", "ALSF", "Metastasis", "cell",
        "../../../ExternalData/alsf/Soragni/SCPCS000524/SCPCL000856_filtered.rds", "SCPCS000524", "ALSF", "Metastasis", "cell",
        "../../../ExternalData/alsf/Soragni/SCPCS000525/SCPCL000857_filtered.rds", "SCPCS000525", "ALSF", "Metastasis", "cell",
        "../../../ExternalData/alsf/Soragni/SCPCS000526/SCPCL000858_filtered.rds", "SCPCS000526", "ALSF", "Metastasis", "cell")

    # Create a function to convert Ensembl IDs to gene symbols
    mapIds_2 <- function(IDs, IDFrom, IDTo) {
        require(org.Hs.eg.db)
        idmap <- mapIds(org.Hs.eg.db,
            keys = IDs,
            column = IDTo,
            keytype = IDFrom,
            multiVals = "first")
        na_vec <- names(idmap[is.na(idmap) == TRUE])
        idmap <- idmap[is.na(idmap) == FALSE]
        idmap_df <- data.frame(
            "From"=names(idmap),
            "To"=unlist(unname(idmap)),
            stringsAsFactors = FALSE)
        return(list(map=idmap_df, noMap=na_vec))
    }

    met_lung2 <- mclapply(1:nrow(mets_meta2),
        function(m) {
            message(paste("Starting to load", mets_meta2$Sample_Name[m], "..."))
            s <- readRDS(mets_meta2$file[m]) %>%
                scater::logNormCounts() %>%
                as.Seurat() %>%
                NormalizeData()
            s$id <- mets_meta2$Sample_Name[m]
            s$src <- mets_meta2$Sample_Source[m]
            s$type <- mets_meta2$Sample_Type[m]
            s$method <- mets_meta2$method[m]
            d <- GetAssayData(s, "originalexp")
            remap <- mapIds_2(rownames(d), "ENSEMBL", "SYMBOL")
            d <- d[remap$map$From, ]
            rownames(d) <- left_join(
                as_tibble(rownames(d)),
                remap[["map"]],
                join_by(value == From)) %>%
                pull(To)
            s[["RNA"]] <- CreateAssayObject(rowsum(d, row.names(d)))
            Seurat::DefaultAssay(s) <- "RNA"
            s[["originalexp"]] <- NULL
            message(paste(mets_meta2$Sample_Name[m], "completed."))
            return(s)
        }, mc.cores = parallelly::availableCores())
    names(met_lung2) <- mets_meta2$Sample_Name

    # Combine the two lists of Seurat objects
    met_lung <- c(met_lung, met_lung2)

    qs::qsave(met_lung, "output/rdata/met_lungs.qs")
} else {
    met_lung <- qs::qread("output/rdata/met_lungs.qs")
}
```

# Find and exclude tumor cells from met samples

NOTE: if tumor cells have not been previously assigned for any of the samples, this script will error out with a message to run that code and create those samples before proceding.
```{r}
if(!file.exists("misc/human_met_labels.qs")) {
    sample_names <- names(met_lung)
    met_lung <- mclapply(seq_along(met_lung), function(s) {
        message(paste("Starting sample", names(met_lung)[s], "..."))
        o <- process_seurat(met_lung[[s]]) %>%
            annotate()
        message(paste0("Completed" , names(met_lung)[s], "."))
        return(o)
    }, mc.cores = parallelly::availableCores())
    names(met_lung) <- sample_names

    met_label <- merge(met_lung[[1]], met_lung[2:length(met_lung)],
        cell.ids <- names(met_lung)) %>%
            JoinLayers() %>%
            NormalizeData() %>%
            ScaleData() %>%
            FindVariableFeatures() %>%
            RunPCA(npcs = 30, verbose = FALSE) %>%
            harmony::RunHarmony(group.by.vars = c("id", "src", "method")) %>%
            RunUMAP(reduction = "harmony", dims = 1:30) %>%
            FindNeighbors(reduction = "harmony", dims = 1:30) %>%
            FindClusters(resolution = 0.5)

    p1 <- r_dim_plot(met_label, group.by = "seurat_clusters")
    p2 <- r_dim_plot(met_label, group.by = "annotations", repel = TRUE)
    p1 + p2

    gt::gt(met_label[[]] %>%
        select(seurat_clusters, annotations) %>%
        group_by(seurat_clusters, annotations) %>%
        tally() %>%
        arrange(seurat_clusters, -n))
    
    met_label <- RenameIdents(met_label,
        `0` = "Tumor",
        `1` = "Myeloid",
        `2` = "T/NK-cell",
        `3` = "Tumor",
        `4` = "Endothelial",
        `5` = "Myeloid",
        `6` = "Cycling",
        `7` = "Tumor",
        `8` = "Tumor",
        `9` = "Smooth_muscle",
        `10` = "Myeloid",
        `11` = "Epithelial",
        `12` = "B-cell",
        `13` = "Tumor",
        `14` = "Myeloid",
        `15` = "LowQ",
        `16` = "Myeloid",
        `17` = "Myeloid",
        `18` = "Endothelial",
        `19` = "Myeloid",
        `20` = "T/NK-cell",
        `21` = "LowQ")

    r_dim_plot(met_label, "Manual Annotations")
    met_label$met_labels <- Idents(met_label)

    qs::qsave(met_label$met_labels, "misc/human_met_labels.qs")
} else {
    met_lung <- merge(met_lung[[1]], met_lung[2:length(met_lung)],
        cell.ids <- names(met_lung)) %>%
            JoinLayers()
    met_lung$met_labels <- qs::qread("misc/human_met_labels.qs")
    met_stroma <- subset(met_lung, met_labels %in% c("Tumor", "LowQ"), invert = TRUE)
}
```

# Combine datasets from normal and met

Need to rewrite to make integration conditional on having been previously run***
```{r}
    # Check to see if integrated dataset has already been processed
if(!file.exists("output/rdata/integrated_lungs.qs")) {
    # # Merge the normal and metastatic lung data into a single object
    # # Downsample the normal lung data
    # for(i in seq_along(nl_lung)) {
    #     nl_lung[[i]] <- subset(nl_lung[[i]], downsample = 1000)
    #     nl_lung[[i]][["RNA"]]$counts <- as(nl_lung[[i]][["RNA"]]$counts,
    #         Class = "dgCMatrix")
    #     nl_lung[[i]] <- NormalizeData(nl_lung[[i]])}

    # nl_lung <- merge(nl_lung[[1]], nl_lung[2:length(nl_lung)],
    #     add.cell.ids = names(nl_lung)) %>%
    #     JoinLayers()
    nl_lung$id <- nl_lung$sample
    nl_lung$method <- nl_lung$fresh_or_frozen
    nl_lung$annotation <- nl_lung$
    nl_lung <- subset(nl_lung, cells = sample(Cells(nl_lung), size = 19000))

    met_stroma <- merge(met_stroma[[1]], met_stroma[2:length(met_stroma)],
        add.cell.ids = names(met_stroma)) %>%
        JoinLayers()

    keep_features <- intersect(rownames(nl_lung), rownames(met_stroma))

    nl_lung <- nl_lung[rownames(nl_lung) %in% keep_features, ]
    met_stroma <- met_stroma[rownames(met_stroma) %in% keep_features, ]

    lungs <- merge(met_stroma, nl_lung) %>%
        JoinLayers() %>%
        NormalizeData() %>%
        ScaleData() %>%
        FindVariableFeatures() %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(group.by.vars = c("id")) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "harmony", dims = 1:30) %>%
        FindClusters(resolution = 0.2)

    lungs <- annotate(lungs)

    qs::qsave(lungs, "output/rdata/integrated_lungs.qs")

} else {
    lungs <- qs::qread("output/rdata/integrated_lungs.qs")
}

p1 <- r_dim_plot(subset(lungs, type == "Healthy"),
    group.by = "cell_type",
    repel = TRUE,
    shuffle = TRUE)
p2 <- r_dim_plot(subset(lungs, type == "Metastasis"),
    group.by = "annotations",
    repel = TRUE,
    shuffle = TRUE)
p3 <- r_dim_plot(lungs, "Integrated Stroma")
p3 | p1 | p2

r_dim_plot(lungs, split.by = "type", group.by = "cell_type", repel = TRUE)

# Perform a semi-automated, manually verified cell type assignment
# ***This needs to be redone since re-building the healthy lung reference
if(!file.exists("misc/lungs_manual_assignment.qs")) {

    lungs <- RenameIdents(lungs,
        `0` = "Fibroblast",
        `1` = "T/NK cell",
        `2` = "Myeloid",
        `3` = "Alveolar epithelium",
        `4` = "Myeloid",
        `5` = "Endothelial",
        `6` = "T/NK cell",
        `7` = "Alveolar epithelium",
        `8` = "Stem/Proliferating",
        `9` = "Stem/Proliferating",
        `10` = "Smooth Muscle",
        `11` = "Airway epithelium",
        `12` = "Granulocyte",
        `13` = "Airway epithelium",
        `14` = "B cell",
        `15` = "Alveolar epithelium",
        `16` = "Endothelial",
        `17` = "Myeloid",
        `18` = "Alveolar epithelium",
        `19` = "Fibroblast",
        `20` = "Fibroblast",
        `21` = "Myeloid",
        `22` = "Alveolar epithelium")

    lungs$manual_assignments <- Idents(lungs)
    Idents(lungs) <- lungs$seurat_clusters

    qs::qsave(lungs$manual_assignments, "misc/lungs_manual_assignment.qs")

} else {
    lungs$manual_assignments <- qs::qread("misc/lungs_manual_assignment.qs")
}

p3 <- r_dim_plot(lungs, "Manual Assignments", group.by = "manual_assignments")
p3 | p1 | p2

r_dim_plot(lungs, "Manual Assignments", group.by = "manual_assignments", split.by = "type")
```

# Subcluster epithelial cells

```{r}
if(!file.exists("output/rdata/human_epithelial.qs")) {
    epi <- subset(lungs, manual_assignments == c(
        "Alveolar epithelium", "Stem/Proliferating"))

    # Reprocess the subsetted cells
    epi <- DietSeurat(epi, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 20, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"), lambda = c(1, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:20) %>%
        FindNeighbors(reduction = "harmony", dims = 1:20) %>%
        FindClusters(resolution = 0.3)
    
    r_dim_plot(epi, group.by = "type")

    epi <- run_fdl(epi)
    r_dim_plot(epi, reduction = "fdl")

    p1 <- r_dim_plot(subset(epi, type == "Healthy"),
        group.by = "cell_type",
        repel = TRUE,
        shuffle = TRUE)
    p2 <- r_dim_plot(subset(epi, type == "Metastasis"),
        group.by = "annotations",
        repel = TRUE,
        shuffle = TRUE)
    p3 <- r_dim_plot(epi, "Integrated epithelial")
    p3 | p1 | p2

    # epi[[]] %>%
    #     select(seurat_clusters, cell_type) %>%
    #     group_by(seurat_clusters, cell_type) %>%
    #     summarize(n = n())
    
    epi <- subset(epi,
        idents = c(2, 3, 6),
        invert = TRUE)

    # Normalize the numbers of cells between normal and mets
    ncells <- min(table(epi$type))
    epi <- SplitObject(epi, split.by = "type")

    for(t in names(epi)) {
        epi[[t]] <- subset(epi[[t]], cells = sample(colnames(epi[[t]]), size = ncells))
    }

    epi <- merge(epi[[1]], epi[[2]]) %>%
        JoinLayers()

    # Reprocess the subsetted cells
    epi <- DietSeurat(epi, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 20, verbose = FALSE) %>%
        harmony::RunHarmony(group.by.vars = c("type")) %>%
        RunUMAP(reduction = "harmony", dims = 1:20) %>%
        FindNeighbors(reduction = "umap", dims = 1:2) %>%
        FindClusters(resolution = 0.1)

    p1 <- r_dim_plot(epi)
    p2 <- r_dim_plot(epi, group.by = "cell_type", repel = TRUE) +
        theme(legend.position = "right")
    p1 | p2

    r_dim_plot(epi, split.by = "type")

    # Perform a global assessment of DEG
    epi_marks <- FindAllMarkers(epi)

    gt::gt(epi_marks %>%
        group_by(cluster) %>%
        slice_max(avg_log2FC, n = 20) %>%
        arrange(cluster, -avg_log2FC)) %>%
        gt::tab_header("DEGs in human AECs (by cluster)")

    epi <- kill_cc(epi)
    Idents(epi) <- epi$seurat_clusters

    r_dim_plot(epi, group.by = "type")
    r_dim_plot(epi, group.by = "cell_type")
    r_dim_plot(epi)

    qs::qsave(epi, "output/rdata/human_epithelial.qs")
} else {
    epi <- qs::qread("output/rdata/human_epithelial.qs")
}

p1 <- r_dim_plot(epi, "Distal Airway - Cell Cycle",
    group.by = "Phase", label = FALSE) +
    ggtitle("Distal Airway - Phase") +
    theme(legend.position = "right")
p2 <- r_dim_plot(epi,
    group.by = "seurat_clusters",
    split.by = "type")
p3 <- r_feature_plot(epi, "AREG", min.cutoff = 2)
p4 <- r_feature_plot(epi, "KRT17", max.cutoff = 3)
p5 <- r_feature_plot(epi, "SFTPC", min.cutoff = 5)
p6 <- r_feature_plot(epi, "AGER", min.cutoff = 2)
(p1 | p2) / (p5 | p6 | p4 | p3)

# Show genes from the basaloid signature identified in:
# https://doi.org/10.1038/s41467-022-33193-0
# https://doi.org/10.1038/s41467-020-17358-3
# https://doi.org/10.1126/sciadv.aba1983
r_feature_plot(epi, "FOSL1", split.by = "type")
r_feature_plot(epi, "CD24", split.by = "type")
r_feature_plot(epi, "ITGB8", split.by = "type")

# Show markers of activated AEC2
r_feature_plot(epi, "AREG", split.by = "type")
r_feature_plot(epi, "TP63", min.cutoff = 1, split.by = "type")
r_feature_plot(epi, "KRT5", split.by = "type")

# Perform a global assessment of DEG
epi_marks <- FindAllMarkers(epi)

gt::gt(epi_marks %>%
    group_by(cluster) %>%
    filter(pct.1 > 0.5) %>%
    slice_max(avg_log2FC, n = 20) %>%
    arrange(cluster, -avg_log2FC)) %>%
    gt::tab_header("DEGs in human AECs (by cluster)")

# Assign cell types
epi2 <- RenameIdents(epi,
    `0` = "0",
    `1` = "",
    `2` = "",
    `3` = "3",
    `4` = "Basaloid",
    `5` = "Basaloid",
    `6` = "",
    `7` = "7",
    `8` = "",
    `9` = "9",
    `10` = "cAEC2",
    `11` = "cAEC2")

epi2$epi_type <- Idents(epi2)

r_dim_plot(epi2,
    group.by = "epi_type",
    split.by = "type")

# Consolidate into a summary dotplot
epi_genes <- c(
    "SFTPA1", "SFTPC", "PGC", # AEC2
    "AREG", "PIGR", # pAEC2
    "TOP2A", "MKI67", "CENPF", # cAEC2
    "KRT17", "CDH2", "LAMB3", "FN1", "TP63", "LAMC2", # Basaloid
    "AGER", "CAV1", "RTKN2") # AEC1

epi2$epi_type <- factor(epi2$epi_type, levels = c("AEC1", "Basaloid", "cAEC2", "pAEC2", "AEC2", 0:12))

DotPlot(epi2,
    features = epi_genes,
    group.by = "epi_type",
    dot.scale = 8,
    cols = "RdBu") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
    coord_fixed()
```

# Subcluster macrophages

```{r}
if(!file.exists(output/rdata/human_macs.qs)) {
    # macs <- subset(lungs,
    #     manual_assignments %in% c(
    #         "Myeloid",
    #         "Stem/Proliferating",
    #         "Differentiating"))

    macs <- subset(lungs, idents = "2")

    macs <- DietSeurat(macs, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"),
            lambda = c(0.8, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "harmony") %>%
        FindClusters(resolution = 0.4)

    p1 <- r_dim_plot(macs)
    p2 <- r_dim_plot(subset(macs, subset = type == "Healthy"),
        group.by = "cell_type",
        repel = TRUE)
    p3 <- r_dim_plot(subset(macs, subset = type == "Metastasis"),
        group.by = "annotations",
        repel = TRUE)
    p1 + p2 + p3
    r_dim_plot(subset(macs, subset = type == "Metastasis"),
        group.by = "annotations",
        repel = TRUE) +
        theme(legend.position = "right")

    # Check the odd clusters 3 and 10
    head(FindMarkers(macs,
        ident.1 = "3",
        only.pos = TRUE) %>%
        filter(pct.1 > 0.4) %>%
        arrange(-avg_log2FC),
        n = 30)
    head(FindMarkers(macs,
        ident.1 = "10",
        only.pos = TRUE) %>%
        filter(pct.1 > 0.4) %>%
        arrange(-avg_log2FC),
        n = 30)

    # Remove these tumor cells
    macs <- subset(macs, idents = c("3", "10"), invert = TRUE)

    # Redo the UMAP
    macs <- FindVariableFeatures(macs) %>%
        ScaleData() %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"),
            lambda = c(0.8, 0.8)) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "harmony") %>%
        FindClusters(resolution = 0.4)

    r_dim_plot(macs, split.by = "type", repel = TRUE)

    r_feature_plot(macs, "MARCO", split.by = "type")
    r_feature_plot(macs, "CD68", split.by = "type")
    r_feature_plot(macs, "MRC1", split.by = "type")
    r_feature_plot(macs, "CCL3", split.by = "type")
    r_feature_plot(macs, "TREM2", split.by = "type")
    r_feature_plot(macs, "CD9", split.by = "type")
    r_feature_plot(macs, "SPP1", split.by = "type")
    r_feature_plot(macs, "GPNMB", split.by = "type")
    r_feature_plot(macs, "FABP5", split.by = "type")

    macs_marks <- FindAllMarkers(macs)

    gt::gt(macs_marks %>%
        group_by(cluster) %>%
        filter(pct.1 > 0.4) %>%
        slice_max(avg_log2FC, n = 20) %>%
        arrange(cluster, -avg_log2FC)) %>%
        gt::tab_header("DEGs in human mononuclear cells (by cluster)")

    # Clean up the macrophage data (non-myeloid cells)
    # Lots of contaminating tumor cells and alveolar macs, filter out
    macs <- subset(macs, idents = c(
        "3", # Tumor
        "0"), # Alveolar macs
        invert = TRUE)

    macs <- ScaleData(macs) %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"),
            lambda = c(0.5, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "umap", dims = 1:2) %>%
        FindClusters(resolution = 0.2)

    r_dim_plot(macs, split.by = "type")

    macs_marks <- FindAllMarkers(macs)

    gt::gt(macs_marks %>%
        group_by(cluster) %>%
        filter(pct.1 > 0.4) %>%
        slice_max(avg_log2FC, n = 20) %>%
        arrange(cluster, -avg_log2FC)) %>%
        gt::tab_header("DEGs in human mononuclear cells (by cluster)")

    # One last cleanup
    macs <- subset(macs, idents = c(
        "10", # Alveolar Macs
        "13", # Plasmacytoid DCs
        "8"), # Plasmacytoid DCs
        invert = TRUE)

    # These papers were helpful for identifying cell types:
    # https://doi.org/10.1002%2Fctm2.1199
    # https://doi.org/10.4049/jimmunol.2100094
    # https://doi.org/10.1038/s41590-023-01468-3
    # https://doi.org/10.1126%2Fscience.aah4573
    macs2 <- RenameIdents(macs,
        "0" = "TAMs",
        "1" = "Lipid-associated",
        "2" = "Scar-Macs",
        "3" = "cMonocyte",
        "4" = "DC2",
        "5" = "Inflammatory",
        "6" = "Cycling",
        "7" = "ncMonocyte",
        "9" = "ncMonocyte",
        "11" = "TIMs",
        "12" = "IFN-TAMs",
        "14" = "TIMs",
        "15" = "TIMs",
        "16" = "DC2",
        "17" = "DC1",
        "18" = "DC3",
        "19" = "DC2",
        "20" = "Interstitial",
        "21" = "DC2",
        "22" = "Interstitial")

    macs2$macs_assignment <- factor(Idents(macs2), levels = c(
        "Scar-Macs",
        "Lipid-associated",
        "TAMs",
        "IFN-TAMs",
        "Inflammatory",
        "Interstitial",
        "TIMs",
        "Cycling",
        "ncMonocyte",
        "cMonocyte",
        "Pre-DC",
        "DC1",
        "DC2",
        "DC3",
        0:25))

    r_dim_plot(macs2,
        split.by = "type",
        group.by = "macs_assignment",
        repel = TRUE)

    qs::qsave(macs2, "output/rdata/human_macs.qs")
} else {
    macs2 <- qs::qread("output/rdata/human_macs.qs")
}

r_dim_plot(macs2, split.by = "type", repel = TRUE)

mac_features <- c(
    "TREM2", "CD9", "SPP1", "GPNMB", # Scar-Macs
    "ACP5", "LGALS3", "FABP5", # Lipid-associated
    "MERTK", "MS4A7", # TAMs
    "IFIT2", "IFIT3", # IFN-TAMS
    "IL1B", "CXCL8", # Inflammatory
    "LYVE1", "SELENOP", # Interstitial
    "SPARC", "CLEC11A", # TIMs
    "MKI67", "TOP2A", # Cycling
    "IFITM1", "IFITM2", # ncMonocyte
    "S100A8", "S100A9", # cMonocyte
    "CLEC9A", "IRF8", # DC1
    "FCER1A", "CD1E", # DC2
    "CCR7", "LAMP3") # DC3

DotPlot(macs2,
    features = mac_features,
    group.by = "macs_assignment",
    cols = "RdBu",
    col.max = 1.5,
    col.min = -1) +
    scale_y_discrete(limits = rev) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
    coord_fixed()

r_dim_plot(macs2,
    split.by = "type",
    group.by = "seurat_clusters",
    repel = TRUE)
```