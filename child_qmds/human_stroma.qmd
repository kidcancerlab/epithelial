# Set up automated cell type annotation

```{r}
lung_ref <- qs::qread("LungRefs/normal_lung.qs")
lung_ref$free_annotation <-
    stringr::str_replace_all(lung_ref$free_annotation,
        c("/" = "_", "\\+" = "_plus"))
lung_ref$free_annotation <-
    stringr::str_replace_all(lung_ref$free_annotation,
        c("Alveolar Epithelial Type 1" = "Alveolar Epithelial",  #nolint
            "Alveolar Epithelial Type 2" = "Alveolar Epithelial",  #nolint
            "Basophil_Mast 1" = "Basophil_Mast",
            "Basophil_Mast 2" = "Basophil_Mast",
            "Bronchial Vessel 1" = "Bronchial Vessel",
            "Bronchial Vessel 2" = "Bronchial Vessel",
            "IGSF21_plus Dendritic" = "Dendritic cells",
            "Myeloid Dendritic Type 1" = "Myeloid Dendritic",   #nolint
            "Myeloid Dendritic Type 2" = "Myeloid Dendritic",   #nolint
            "Natural Killer" = "NK cells",
            "Natural Killer T" = "NKT",
            "NK cells T" = "NKT",
            "CD4_plus Memory/Effector T" = "CD4+ T cells",
            "CD4_plus Naive T" = "CD4+ T cells",
            "CD8_plus Memory_Effector T" = "CD8+ T cells",
            "CD8_plus Naive T" = "CD8+ T cells",
            "Proliferating NK_T" = "NKT",
            "TREM2_plus Dendritic" = "Dendritic cells",
            "Proliferating Macrophage" = "Macrophage",
            "Nonclassical Monocyte" = "Monocytes",
            "Classical Monocyte" = "Monocytes"))

annotate <- function(sobject,
    aggr_ref = TRUE,
    label_type = "label.main",
    ...) {
        hpca <- celldex::HumanPrimaryCellAtlasData()
        hpca$label.main <-
            stringr::str_replace_all(hpca$label.main,
                c("T_cells" = "T cells",
                "B_cell" = "B cells",
                "NK_cell" = "NK cells",
                "Monocyte" = "Monocytes",
                "DC" = "Dendritic cells"))
        huim <- celldex::MonacoImmuneData()
        ref3 <- GetAssayData(lung_ref)
        ref <- list(hpca, huim, ref3)
        labels <- list(
            hpca[[label_type]],
            huim[[label_type]],
            lung_ref$free_annotation)
        annotation <-
            SingleR::SingleR(test = Seurat::as.SingleCellExperiment(sobject),
                ref = ref,
                labels = labels,
                aggr.ref = aggr_ref,
                BPPARAM = BiocParallel::MulticoreParam(
                    parallelly::availableCores()),
                ...)
        sobject$annotations <- annotation$labels
        sobject$cell_scores <-
            apply(X = annotation$scores,
                MARGIN = 1,
                function(x) max(x, na.rm = TRUE))
        return(sobject)
    }
```

# Load the normal human lung data
GSE227136 contains a very large control normal lung dataset. We will extract normal lung scRNA-seq from this.

The download will contain a subset of the normal lung tissue samples, balanced for whole cell and nucleus based RNAseq, from the Human Lung Cell Atlas project.

NOTE: If you haven't already downloaded and processed, you might need to run this step on a himem node.

```{r}
if(!file.exists("hlca/nl_lung.qs")) {
    if (!file.exists("/gpfs0/home2/gdrobertslab/lab/GenRef/sc_ref_datasets/human/hlca.qs")) {
        options(
            reticulate.conda_binary = "/gpfs0/export/apps/easybuild/software/Miniconda3/4.9.2/condabin/conda",
            SCP_env_name = "r")
        library(SCP)
        library(reticulate)
        sc <- import("scanpy")

        # Download the annotated full dataset from the Human Lung Cell Atlas project
        # https://doi.org/10.1038/s41591-023-02327-2
        system(
            "curl https://datasets.cellxgene.cziscience.com/3ab47484-a3eb-4f6a-beea-670e1a8fc1e8.h5ad --output /gpfs0/home2/gdrobertslab/lab/GenRef/sc_ref_datasets/human/hlca.h5ad"
        )

        # Need to invoke BPCells to handle the large object until we simplify
        hlca.data <- BPCells::open_matrix_anndata_hdf5(
            path = "/gpfs0/home2/gdrobertslab/rxr014/hlca.h5ad"
        )

        # Write the matrix to a directory
        BPCells::write_matrix_dir(mat = hlca.data, dir = "hlca/")

        # Now that we have the matrix on disk, we can load it
        hlca.mat <- BPCells::open_matrix_dir(dir = "hlca/")
        hlca.mat <- Azimuth:::ConvertEnsembleToSymbol(mat = hlca.mat, species = "human")
        hlca.meta <- Azimuth::LoadH5ADobs("/gpfs0/home2/gdrobertslab/rxr014/hlca.h5ad")

        # Create Seurat object (just metadata and raw counts)
        hlca <- SeuratObject::CreateSeuratObject(counts = hlca.mat, meta.data = hlca.meta)

        # Write the simplified Seurat object
        qs::qsave(hlca, "/gpfs0/home2/gdrobertslab/lab/GenRef/sc_ref_datasets/human/hlca.qs")

    } else {
        hlca <- qs::qread("/gpfs0/home2/gdrobertslab/lab/GenRef/sc_ref_datasets/human/hlca.qs")
    }

    cases <- as.data.frame(hlca@meta.data) %>%
        select(
            sample,
            age_or_mean_of_age_range,
            smoking_status,
            subject_type,
            tissue,
            lung_condition,
            assay,
            fresh_or_frozen
            ) %>%
        filter(
            !tissue %in% c("respiratory airway", "nose"),
            lung_condition == "Healthy",
            assay == "10x 3' v3",
            age_or_mean_of_age_range > 1,
            smoking_status != 0
            ) %>%
        unique()

    table(cases$fresh_or_frozen)

    nl_lung <- subset(hlca, subset = sample %in% cases$sample)
    nl_lung$type <- "Healthy"

    nl_lung <- SplitObject(nl_lung, split.by = "sample")

    qs::qsave(nl_lung, "hlca/nl_lung.qs")

} else {
    nl_lung <- qs::qread("hlca/nl_lung.qs")
}
```

# Load the osteosarcoma lung metastases

```{r}
if(!file.exists("output/rdata/met_lungs.qs")) {
    if(!dir.exists("GSE152048")) {
        dir.create("GSE152048")
    }

    if(!dir.exists("GSE152048/BC10")) {
        dir.create("GSE152048/BC10")
        download.file("https://ftp.ncbi.nlm.nih.gov/geo/series/GSE152nnn/GSE152048/suppl/GSE152048%5FBC10.matrix.tar.gz",
            destfile = "GSE152048/BC10/matrix.tar.gz")
        untar("GSE152048/BC10/matrix.tar.gz",
            exdir = "GSE152048",
            extras = "--remove-files")
    }

    if(!dir.exists("GSE152048/BC17")) {
        dir.create("GSE152048/BC17")
        download.file("https://ftp.ncbi.nlm.nih.gov/geo/series/GSE152nnn/GSE152048/suppl/GSE152048%5FBC17.matrix.tar.gz",
            destfile = "GSE152048/BC17/matrix.tar.gz")
        untar("GSE152048/BC17/matrix.tar.gz",
            exdir = "GSE152048",
            extras = "--remove-files")
    }

mets_meta <- tribble(
    ~file, ~Sample_Name, ~Sample_Source, ~Sample_Type, ~method,
    "GSE152048/BC10", "BC10", "GSE152048", "Metastasis", "cell",
    "GSE152048/BC17", "BC17", "GSE152048", "Metastasis", "cell",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0058/outs/filtered_feature_bc_matrix/", "S0058", "Roberts Lab", "Metastasis", "cell",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0059/outs/filtered_feature_bc_matrix/", "S0059", "Roberts Lab", "Metastasis", "cell",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0217/filtered_feature_bc_matrix", "S0217", "Roberts Lab", "Metastasis", "nucleus",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0218/filtered_feature_bc_matrix", "S0218", "Roberts Lab", "Metastasis", "nucleus",
    "/gpfs0/home2/gdrobertslab/lab/Counts/SC069/filtered_feature_bc_matrix/", "SC069", "Roberts Lab", "Metastasis", "nucleus",
    "/gpfs0/home2/gdrobertslab/lab/Counts/SC072/filtered_feature_bc_matrix/", "SC072", "Roberts Lab", "Metastasis", "nucleus",
    "/gpfs0/home2/gdrobertslab/lab/Counts/SC073/filtered_feature_bc_matrix/", "SC073", "Roberts Lab", "Metastasis", "nucleus")

met_lung <- mclapply(1:nrow(mets_meta),
    function(m) {
        message(paste("Starting to load", mets_meta$Sample_Name[m], "..."))
        s <- tenx_load_qc(mets_meta$file[m], violin_plot = FALSE) %>%
            NormalizeData()
        s$id <- mets_meta$Sample_Name[m]
        s$src <- mets_meta$Sample_Source[m]
        s$type <- mets_meta$Sample_Type[m]
        s$method <- mets_meta$method[m]
        message(paste(mets_meta$Sample_Name[m], "completed."))
        return(s)
    }, mc.cores = parallelly::availableCores())
names(met_lung) <- mets_meta$Sample_Name

qs::qsave(met_lung, "output/rdata/met_lungs.qs")
} else {
    met_lung <- qs::qread("output/rdata/met_lungs.qs")
}
```

# Find and exclude tumor cells from met samples

NOTE: if tumor cells have not been previously assigned for any of the samples, this script will error out with a message to run that code and create those samples before proceding.
```{r}
# if(!file.exists("output/rdata/met_lung_annotated.qs")) {
#     met_lung <- mclapply(seq_along(met_lung), function(s) {
#         message(paste("Starting sample", names(met_lung)[s], "..."))
#         o <- process_seurat(met_lung[[s]]) %>%
#             annotate()
#         message(paste0("Completed" , names(met_lung)[s], "."))
#         return(o)
#     }, mc.cores = parallelly::availableCores())
#     names(met_lung) <- mets_meta$Sample_Name

#     qs::qsave(met_lung, "output/rdata/met_lung_annotated.qs")
# } else {
#     met_lung <- qs::qread("output/rdata/met_lung_annotated.qs")
# }

# Check to see if all of the relevant annotation files are present
file_check <- TRUE
for(f in names(met_lung)) {
    if(!file.exists(paste0("misc/", f, "-tumor_assignments.qs"))) {
        file_check <- FALSE
        stop("At least some of the tumor assignment files are missing. You will need to run the code process in this file manually before proceding to create those files.")
    }
}

# If all of the annotation files are present, then

if (file_check) {
# Separate the tumor cells from the lung stroma
    met_stroma <- lapply(seq_along(met_lung), function (i) {
        met_lung[[i]]$tumor <- qs::qread(file = paste0(
            "misc/",
            names(met_lung)[i],
            "-tumor_assignments.qs"))
        s <- subset(met_lung[[i]], tumor == "stroma") %>%
            DietSeurat()
        return(s)
    })

    names(met_stroma) <- names(met_lung)

} else {
    # Skip this code if all files are present, otherwise will need to
    # be run manually to produce the annotation files
    plots <- lapply(seq_along(met_stroma), function(i) {
        p1 <- r_dim_plot(met_stroma[[i]], names(met_stroma)[i])
        p2 <- r_feature_plot(met_stroma[[i]], "cell_scores")
        p3 <- r_feature_plot(met_stroma[[i]], "COL1A1")
        p4 <- r_feature_plot(met_stroma[[i]], "MYO1D")
        tumor_cells <- met_stroma[[i]][[]] %>% filter(tumor == "tumor") %>% rownames()
        p5 <- DimPlot(met_stroma[[i]], cells.highlight = tumor_cells) +
            theme(legend.position = "none") +
            coord_fixed()
        p6 <- r_dim_plot(met_stroma[[i]], label = TRUE, group.by = "annotations")
        p <- (p1 | p6 | p2) / (p3 | p4 | p5) +
            plot_annotation(title = names(met_stroma)[i])
        return(p)
    })

    # Code for manual curation. Designed for interactive review of plots.
    i = 1
    plots[[i]]

    gt::gt(met_lung[[i]]@meta.data %>%
        select(annotations, seurat_clusters) %>%
        group_by(seurat_clusters, annotations) %>%
        summarise(n = n()) %>%
        arrange(seurat_clusters, -n))

    # Use this code, changing cluster numbers, to designate tumor cells.
    met_lung[[i]]$tumor <- "stroma"
    met_lung[[i]]$tumor[met_lung[[i]]$seurat_clusters == 5] <- "tumor"

    # Check result of tumor designation and save a list of tumor assignments.
    r_dim_plot(met_lung[[i]], "Tumor vs. Stroma", group.by = "tumor")
    qs::qsave(met_lung[[i]]$tumor,
        paste0("misc/", names(met_lung)[i], "-tumor_assignments.qs"))
}
```

# Combine datasets from normal and met

Need to rewrite to make integration conditional on having been previously run***
```{r}
    # Check to see if integrated dataset has already been processed
if(!file.exists("output/rdata/integrated_lungs.qs")) {
    # Merge the normal and metastatic lung data into a single object
    # Downsample the normal lung data
    for(i in seq_along(nl_lung)) {
        nl_lung[[i]] <- subset(nl_lung[[i]], downsample = 1000)
        nl_lung[[i]][["RNA"]]$counts <- as(nl_lung[[i]][["RNA"]]$counts,
            Class = "dgCMatrix")
        nl_lung[[i]] <- NormalizeData(nl_lung[[i]])}

    nl_lung <- merge(nl_lung[[1]], nl_lung[2:length(nl_lung)],
        add.cell.ids = names(nl_lung)) %>%
        JoinLayers()
    nl_lung$id <- nl_lung$sample
    nl_lung$method <- nl_lung$suspension_type

    met_stroma <- merge(met_stroma[[1]], met_stroma[2:length(met_stroma)],
        add.cell.ids = names(met_stroma)) %>%
        JoinLayers()

    keep_features <- intersect(rownames(nl_lung), rownames(met_stroma))

    nl_lung <- nl_lung[rownames(nl_lung) %in% keep_features, ]
    met_stroma <- met_stroma[rownames(met_stroma) %in% keep_features, ]

    lungs <- merge(met_stroma, nl_lung) %>%
        JoinLayers() %>%
        NormalizeData() %>%
        ScaleData() %>%
        FindVariableFeatures() %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(group.by.vars = c("id")) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "harmony", dims = 1:30) %>%
        FindClusters(resolution = 0.2)

    lungs <- annotate(lungs)

    qs::qsave(lungs, "output/rdata/integrated_lungs.qs")

} else {
    lungs <- qs::qread("output/rdata/integrated_lungs.qs")
}

p1 <- r_dim_plot(subset(lungs, type == "Healthy"),
    group.by = "ann_level_2",
    repel = TRUE,
    shuffle = TRUE)
p2 <- r_dim_plot(subset(lungs, type == "Metastasis"),
    group.by = "annotations",
    repel = TRUE,
    shuffle = TRUE)
p3 <- r_dim_plot(lungs, "Integrated Stroma")
p3 | p1 | p2

# Perform a semi-automated, manually verified cell type assignment
if(!file.exists("misc/lungs_manual_assignment.qs")) {
    gt::gt(lungs@meta.data %>%
        mutate(integrated = coalesce(annotations, cell_type)) %>%
        select(seurat_clusters, integrated) %>%
        group_by(seurat_clusters, integrated) %>%
        summarise(n = n()) %>%
        arrange(seurat_clusters, -n))

    lungs <- RenameIdents(lungs,
        `0` = "Fibroblast",
        `1` = "T/NK cell",
        `2` = "Myeloid",
        `3` = "Alveolar epithelium",
        `4` = "Myeloid",
        `5` = "Endothelial",
        `6` = "T/NK cell",
        `7` = "Alveolar epithelium",
        `8` = "Differentiating",
        `9` = "Stem/Proliferating",
        `10` = "Smooth Muscle",
        `11` = "Airway epithelium",
        `12` = "Granulocyte",
        `13` = "Airway epithelium",
        `14` = "B cell",
        `15` = "Alveolar epithelium",
        `16` = "Endothelium",
        `17` = "Myeloid",
        `18` = "Alveolar epithelium",
        `19` = "Fibroblast",
        `20` = "Fibroblast",
        `21` = "Myeloid",
        `22` = "Alveolar epithelium")

    lungs$manual_assignments <- Idents(lungs)
    Idents(lungs) <- lungs$seurat_clusters
    qs::qsave(lungs$manual_assignments, "misc/lungs_manual_assignment.qs")
} else {
    lungs$manual_assignments <- qs::qread("misc/lungs_manual_assignment.qs")
}

p3 <- r_dim_plot(lungs, "Manual Assignments", group.by = "manual_assignments")
p3 | p1 | p2

r_dim_plot(lungs, "Manual Assignments", group.by = "manual_assignments", split.by = "type")
```

# Subcluster epithelial cells

```{r}
if(!file.exists("output/rdata/human_epithelial.qs")) {
    epi <- subset(lungs, manual_assignments == c(
        "Alveolar epithelium", "Stem/Proliferating", "Differentiating"))

    # Reprocess the subsetted cells
    epi <- DietSeurat(epi, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 20, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"), lambda = c(1, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:20) %>%
        FindNeighbors(reduction = "harmony", dims = 1:20) %>%
        FindClusters(resolution = 0.3)

    r_dim_plot(epi, group.by = "type")
    r_dim_plot(epi, group.by = "cell_type", repel = TRUE) +
        theme(legend.position = "right")
    r_dim_plot(epi)

    epi <- subset(epi,
        idents = c("10", "11", "12", "13", "16", "19"),
        invert = TRUE)

    # Normalize the numbers of cells between normal and mets
    ncells <- min(table(epi$type))
    epi <- SplitObject(epi, split.by = "type")

    for(t in names(epi)) {
        epi[[t]] <- subset(epi[[t]], cells = sample(colnames(epi[[t]]), size = ncells))
    }

    epi <- merge(epi[[1]], epi[[2]])

    # Reprocess the subsetted cells
    epi <- DietSeurat(epi, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 20, verbose = FALSE) %>%
        harmony::RunHarmony(group.by.vars = c("src", "type"), lambda = c(1, 1)) %>%
        RunUMAP(reduction = "harmony", dims = 1:20, seed.use = 555) %>%
        FindNeighbors(reduction = "umap", dims = 1:2) %>%
        FindClusters(resolution = 0.1)

    p1 <- r_dim_plot(epi)
    p2 <- r_dim_plot(epi, group.by = "cell_type", repel = TRUE) +
        theme(legend.position = "right")
    p1 | p2

    r_dim_plot(epi, split.by = "type")

    # Perform a global assessment of DEG
    epi_marks <- FindAllMarkers(epi)

    gt::gt(epi_marks %>%
        group_by(cluster) %>%
        slice_max(avg_log2FC, n = 20) %>%
        arrange(cluster, -avg_log2FC)) %>%
        gt::tab_header("DEGs in human AECs (by cluster)")

    # One more cleanup - non-epithelial carryover
    epi <- subset(epi, idents = c("9", "5", "7"), invert = TRUE)

    # Reprocess the subsetted cells
    epi <- RunPCA(epi, npcs = 20, verbose = FALSE) %>%
        harmony::RunHarmony(group.by.vars = c("id", "method"), lambda = c(1, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:20, seed.use = 444) %>%
        FindNeighbors(reduction = "umap", dims = 1:2) %>%
        FindClusters(resolution = 0.3)

    epi <- kill_cc(epi)
    Idents(epi) <- epi$seurat_clusters

    r_dim_plot(epi, group.by = "type")
    r_dim_plot(epi, group.by = "cell_type")
    r_dim_plot(epi)

# One last cleanup of non-epithelial cells
epi <- subset(epi, idents = "8", invert = T)

    qs::qsave(epi, "output/rdata/human_epithelial.qs")
} else {
    epi <- qs::qread("output/rdata/human_epithelial.qs")
}

p1 <- r_dim_plot(epi, "Distal Airway - Cell Cycle",
    group.by = "Phase", label = FALSE) +
    ggtitle("Distal Airway - Phase") +
    theme(legend.position = "right")
p2 <- r_dim_plot(epi,
    group.by = "seurat_clusters",
    split.by = "type")
p3 <- r_feature_plot(epi, "AREG", min.cutoff = 2)
p4 <- r_feature_plot(epi, "KRT17", max.cutoff = 3)
p5 <- r_feature_plot(epi, "SFTPC", min.cutoff = 5)
p6 <- r_feature_plot(epi, "AGER", min.cutoff = 2)
(p1 | p2) / (p5 | p6 | p4 | p3)

# Show genes from the basaloid signature identified in:
# https://doi.org/10.1038/s41467-022-33193-0
# https://doi.org/10.1038/s41467-020-17358-3
# https://doi.org/10.1126/sciadv.aba1983
r_feature_plot(epi, "FOSL1", split.by = "type")
r_feature_plot(epi, "CD24", split.by = "type")
r_feature_plot(epi, "ITGB8", split.by = "type")

# Show markers of activated AEC2
r_feature_plot(epi, "AREG", split.by = "type")
r_feature_plot(epi, "TP63", min.cutoff = 1, split.by = "type")
r_feature_plot(epi, "KRT5", split.by = "type")

# Perform a global assessment of DEG
epi_marks <- FindAllMarkers(epi)

gt::gt(epi_marks %>%
    group_by(cluster) %>%
    slice_max(avg_log2FC, n = 20) %>%
    arrange(cluster, -avg_log2FC)) %>%
    gt::tab_header("DEGs in human AECs (by cluster)")

# Assign cell types
epi2 <- RenameIdents(epi,
    `0` = "AEC2",
    `1` = "AEC1",
    `2` = "Basaloid",
    `3` = "pAEC2",
    `4` = "Basaloid",
    `5` = "AEC2",
    `6` = "cAEC2",
    `7` = "Basaloid",
    `9` = "cAEC2",
    `10` = "cAEC2")

epi2$epi_type <- Idents(epi2)

r_dim_plot(epi2,
    group.by = "epi_type",
    split.by = "type")

# Consolidate into a summary dotplot
epi_genes <- c(
    "SFTPA1", "SFTPC", "PGC", # AEC2
    "AREG", "MUC1", # pAEC2
    "TOP2A", "MKI67", "CENPF", # cAEC2
    "KRT17", "CDH2", "LAMB3", "FN1", # Basaloid
    "AGER", "CAV1", "CLDN18") # AEC1

epi2$epi_type <- factor(epi2$epi_type, levels = c("AEC1", "Basaloid", "cAEC2", "pAEC2", "AEC2", 0:12))

DotPlot(epi2,
    features = epi_genes,
    group.by = "epi_type",
    dot.scale = 8,
    cols = "RdBu") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

```

# Subcluster macrophages

```{r}
if(!file.exists(output/rdata/human_macs.qs)) {
    macs <- subset(lungs,
        manual_assignments %in% c(
            "Myeloid",
            "Stem/Proliferating",
            "Differentiating"))

    macs <- DietSeurat(macs, assays = "RNA") %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"),
            lambda = c(0.5, 0.5)) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "harmony") %>%
        FindClusters(resolution = 0.4)

    r_dim_plot(macs, "Macrophage Clustering", split.by = "type")
    r_dim_plot(macs, group.by = "cell_type", repel = TRUE)
    r_dim_plot(macs, group.by = "annotations", repel = TRUE)
    r_feature_plot(macs, "MARCO", split.by = "type")
    r_feature_plot(macs, "CD68", split.by = "type")
    r_feature_plot(macs, "CD4", split.by = "type")
    r_feature_plot(macs, "TREM2", split.by = "type")


    # Clean up the macrophage data (non-myeloid cells)
    macs <- subset(macs, idents = c(
        "1"), # Non-myeloid, mostly epithelial
        invert = TRUE)

    macs_marks <- FindAllMarkers(macs)

    gt::gt(macs_marks %>%
        group_by(cluster) %>%
        slice_max(avg_log2FC, n = 20) %>%
        arrange(cluster, -avg_log2FC)) %>%
        gt::tab_header("DEGs in human mononuclear cells (by cluster)")

    r_dim_plot(macs, "Macrophage Clustering", split.by = "type")
    r_dim_plot(macs, group.by = "id", split.by = "type", repel = TRUE) +
        theme(legend.position = "bottom")
    r_dim_plot(macs, group.by = "cell_type", repel = TRUE)
    r_dim_plot(macs, group.by = "annotations", repel = TRUE)
    r_feature_plot(macs, "TREM2", split.by = "type")
    r_feature_plot(macs, "CD9", split.by = "type")
    r_feature_plot(macs, "SPP1", split.by = "type")
    r_feature_plot(macs, "GPNMB", split.by = "type")
    r_feature_plot(macs, "FABP5", split.by = "type")

    # Lots of contaminating tumor cells and alveolar macs, filter out
    macs <- subset(macs, idents = c("0", "2", "4"))

    macs <- SCTransform(macs) %>%
        RunPCA(npcs = 30, verbose = FALSE) %>%
        harmony::RunHarmony(
            group.by.vars = c("id", "method"),
            lambda = c(0.8, 0.8)) %>%
        RunUMAP(reduction = "harmony", dims = 1:30) %>%
        FindNeighbors(reduction = "umap", dims = 1:2) %>%
        FindClusters(resolution = 0.5)

    qs::qsave(macs, "output/rdata/human_macs.qs")
} else {
    macs <- qs::qread("output/rdata/human_macs.qs")
}

r_dim_plot(macs, split.by = "type")

macs_marks <- FindAllMarkers(macs)

gt::gt(macs_marks %>%
    group_by(cluster) %>%
    slice_max(avg_log2FC, n = 20) %>%
    arrange(cluster, -avg_log2FC)) %>%
    gt::tab_header("DEGs in human mononuclear cells (by cluster)")


mac_features <- c(
    "TREM2", "CD9", "SPP1", "GPNMB",  # Scar-TAMs
    "MERTK", "MS4A7", # TAMs
    "IFIT2", "IFIT3", "CXCL10", # IFN-TAMS
    "ACP5", "APOC1", "LGALS3", # Lipid-associated
    "IL1B", "CXCL8", "CCL3", # Inflammatory
    "LYVE1", "SELENOP", # Interstitial
    "LST1", "CD52", # ncMonocyte
    "LYZ", "S100A8", "S100A9", # cMonocyte
    "CD1E", "CLEC10A", # Pre-DC
    "CLEC9A", "IRF8", # DC1
    "IL1R2", "CCL17", # DC2
    "CCR7", "LAMP3") # DC3

# These papers were helpful for identifying cell types:
# https://doi.org/10.1002%2Fctm2.1199
# https://doi.org/10.4049/jimmunol.2100094
# https://doi.org/10.1038/s41590-023-01468-3
# https://doi.org/10.1126%2Fscience.aah4573
macs2 <- RenameIdents(macs,
    "1" = "TAMs",
    "2" = "Lipid-associated",
    "3" = "Pre-DC",
    "6" = "cMonocyte",
    "4" = "ncMonocyte",
    "23" = "ncMonocyte",
    "12" = "Interstitial",
    "15" = "Interstitial",
    "14" = "Scar-TAMs",
    "5" = "Inflammatory",
    "16" = "Inflammatory",
    "17" = "Inflammatory",
    "19" = "Inflammatory",
    "0" = "Lipid-associated",
    "10" = "Lipid-associated",
    "11" = "Lipid-associated",
    "24" = "Lipid-associated",
    "18" = "IFN-TAMs",
    "8" = "Pre-DC",
    "20" = "DC1",
    "21" = "DC3",
    "13" = "TAMs",
    "22" = "DC2",
    "7" = "TAMs",
    "9" = "TAMs")

macs2$macs_assignment <- factor(Idents(macs2), levels = c(
    "Scar-TAMs",
    "TAMs",
    "IFN-TAMs",
    "Lipid-associated",
    "Inflammatory",
    "Interstitial",
    "ncMonocyte",
    "cMonocyte",
    "Pre-DC",
    "DC1",
    "DC2",
    "DC3",
    0:25))

DotPlot(macs2,
    features = mac_features,
    group.by = "macs_assignment",
    cols = "RdBu",
    col.max = 1.5) +
    scale_y_discrete(limits = rev) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

r_dim_plot(macs2, split.by = "type", repel = TRUE)

Idents(macs) <- macs$seurat_clusters
```