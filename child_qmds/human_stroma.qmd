# Set up automated cell type annotation

```{r}
lung_ref <- qs::qread("LungRefs/normal_lung.qs")
lung_ref$free_annotation <-
    str_replace_all(lung_ref$free_annotation,
        c("/" = "_", "\\+" = "_plus"))
lung_ref$free_annotation <-
    stringr::str_replace_all(lung_ref$free_annotation,
        c("Alveolar Epithelial Type 1" = "Alveolar Epithelial",  #nolint
            "Alveolar Epithelial Type 2" = "Alveolar Epithelial",  #nolint
            "Basophil_Mast 1" = "Basophil_Mast",
            "Basophil_Mast 2" = "Basophil_Mast",
            "Bronchial Vessel 1" = "Bronchial Vessel",
            "Bronchial Vessel 2" = "Bronchial Vessel",
            "IGSF21_plus Dendritic" = "Dendritic cells",
            "Myeloid Dendritic Type 1" = "Myeloid Dendritic",   #nolint
            "Myeloid Dendritic Type 2" = "Myeloid Dendritic",   #nolint
            "Natural Killer" = "NK cells",
            "Natural Killer T" = "NKT",
            "NK cells T" = "NKT",
            "CD4_plus Memory/Effector T" = "CD4+ T cells",
            "CD4_plus Naive T" = "CD4+ T cells",
            "CD8_plus Memory_Effector T" = "CD8+ T cells",
            "CD8_plus Naive T" = "CD8+ T cells",
            "Proliferating NK_T" = "NKT",
            "TREM2_plus Dendritic" = "Dendritic cells",
            "Proliferating Macrophage" = "Macrophage",
            "Nonclassical Monocyte" = "Monocytes",
            "Classical Monocyte" = "Monocytes"))

annotate <- function(sobject,
    aggr_ref = FALSE,
    label_type = "label.main",
    ...) {
        hpca <- celldex::HumanPrimaryCellAtlasData()
        hpca$label.main <-
            stringr::str_replace_all(hpca$label.main,
                c("T_cells" = "T cells",
                "B_cell" = "B cells",
                "NK_cell" = "NK cells",
                "Monocyte" = "Monocytes",
                "DC" = "Dendritic cells"))
        huim <- celldex::MonacoImmuneData()
        ref3 <- GetAssayData(lung_ref)
        ref <- list(hpca, huim, ref3)
        labels <- list(
            hpca[[label_type]],
            huim[[label_type]],
            lung_ref$free_annotation)
        annotation <-
            SingleR::SingleR(test = Seurat::as.SingleCellExperiment(sobject),
                ref = ref,
                labels = labels,
                aggr.ref = aggr_ref,
                ...)
        sobject$annotations <- annotation$labels
        sobject$cell_scores <-
            apply(X = annotation$scores,
                MARGIN = 1,
                function(x) max(x, na.rm = TRUE))
        return(sobject)
    }
```

# Load the normal human lung data
GSE227136 contains a very large control normal lung dataset. We will extract normal lung scRNA-seq from this.

The download will contain all of the lung sets (diseased and normal). We will keep only the healthy lung samples processed at TGen--these were not sorted like those processed at Vanderbilt, so match our datasets better. We will also keep only the never-smokers. This reduces our sample to the following list of sample names: THD0002, THD0006, THD0010, THD0014, VUHD69, VUHD076.

NOTE: If you haven't already downloaded and processed, you might need to run this step on a himem node.

```{r}
# Check to see if we've already downloaded and processed these files
if(!file.exists("output/rdata/normal_lung.qs")) {
    # Download the files
    if(!dir.exists("GSE227136")) {
        dir.create("GSE227136")
    }

    if(!file.exists("GSE227136/GSE227136.rds")) {
        options(timeout = 1800)
        download.file("https://ftp.ncbi.nlm.nih.gov/geo/series/GSE227nnn/GSE227136/suppl/GSE227136%5FILD%5Fall%5Fcelltypes%5FSeurat.rds.gz",
            destfile = "GSE227136/GSE227136.rds.gz")
        R.utils::gunzip("GSE227136/GSE227136.rds.gz")
    }

    # Make a list of the normal lung sample names
    normal_names <- c("THD0002", "THD0006", "THD0010", "THD0014", "VUHD69", "VUHD076")

    # Isolate the normal lung datasets
    normal_lung <- readRDS("GSE227136/GSE227136.rds") %>%
        subset(Sample_Name %in% normal_names)
    DefaultAssay(normal_lung) <- "RNA"
    normal_lung <- DietSeurat(normal_lung, assays = "RNA") %>%
        NormalizeData() %>%
        SplitObject(split.by = "Sample_Name")

    qs::qsave(normal_lung, "output/rdata/normal_lung.qs")

} else {

    normal_lung <- qs::qread("output/rdata/normal_lung.qs")

}
```

# Load the osteosarcoma lung metastases

```{r}
if(!file.exists("output/rdata/met_lungs.qs")) {
    if(!dir.exists("GSE152048")) {
        dir.create("GSE152048")
    }

    if(!dir.exists("GSE152048/BC10")) {
        dir.create("GSE152048/BC10")
        download.file("https://ftp.ncbi.nlm.nih.gov/geo/series/GSE152nnn/GSE152048/suppl/GSE152048%5FBC10.matrix.tar.gz",
            destfile = "GSE152048/BC10/matrix.tar.gz")
        untar("GSE152048/BC10/matrix.tar.gz",
            exdir = "GSE152048",
            extras = "--remove-files")
    }

    if(!dir.exists("GSE152048/BC17")) {
        dir.create("GSE152048/BC17")
        download.file("https://ftp.ncbi.nlm.nih.gov/geo/series/GSE152nnn/GSE152048/suppl/GSE152048%5FBC17.matrix.tar.gz",
            destfile = "GSE152048/BC17/matrix.tar.gz")
        untar("GSE152048/BC17/matrix.tar.gz",
            exdir = "GSE152048",
            extras = "--remove-files")
    }
}

mets_meta <- tribble(
    ~file, ~Sample_Name, ~Sample_Source, ~Sample_Type, ~method,
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0058/outs/filtered_feature_bc_matrix", "S0058", "Roberts Lab", "Metastasis", "cell",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0059/outs/filtered_feature_bc_matrix", "S0059",  "Roberts Lab", "Metastasis", "cell",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0217/filtered_feature_bc_matrix", "S0217", "Roberts Lab", "Metastasis", "nucleus",
    "/gpfs0/home2/gdrobertslab/lab/Counts/S0218/filtered_feature_bc_matrix", "S0218", "Roberts Lab", "Metastasis", "nucleus",
    "GSE152048/BC10", "BC10", "GSE152048", "Metastasis", "cell",
    "GSE152048/BC17", "BC17", "GSE152048", "Metastasis", "cell"
)

met_lung <- mclapply(1:nrow(mets_meta),
    function(m) {
        message(paste("Starting to load", mets_meta$Sample_Name[m], "..."))
        s <- tenx_load_qc(mets_meta$file[m], violin_plot = FALSE) %>%
            NormalizeData()
        s$id <- mets_meta$Sample_Name[m]
        s$src <- mets_meta$Sample_Source[m]
        s$type <- mets_meta$Sample_Type[m]
        s$method <- mets_meta$method[m]
        message(paste(mets_meta$Sample_Name[m], "completed."))
        return(s)
    }, mc.cores = parallelly::availableCores())
names(met_lung) <- mets_meta$Sample_Name
```

# Find and exclude tumor cells from met samples

```{r}
# met_lung <- mclapply(seq_along(met_lung), function(s) {
#     message(paste("Starting sample", names(met_lung)[s], "..."))
#     o <- process_seurat(met_lung[[s]]) %>%
#         annotate()
#     return(o)
#     message(paste("Completed", names(met_lung)[s], "."))
# }, mc.cores = parallelly::availableCores())

# qs::qsave(met_lung, "output/rdata/met_lung_annotated.qs")

# plots <- lapply(seq_along(met_lung), function(i) {
#     p1 <- r_dim_plot(met_lung[[i]], names(met_lung)[i])
#     p2 <- r_feature_plot(met_lung[[i]], "cell_scores")
#     p3 <- r_feature_plot(met_lung[[i]], "COL1A1")
#     p4 <- r_feature_plot(met_lung[[i]], "SPP1")
#     p5 <- r_feature_plot(met_lung[[i]], "nCount_RNA")
#     p6 <- DimPlot(met_lung[[i]], label = TRUE, group.by = "annotations") +
#         theme(legend.position = "none") +
#         coord_fixed()
#     p <- (p1 | p6 | p2) / (p3 | p4 | p5)
#     return(p)
# })

# # Code for manual curation. Designed for interactive review of plots.
# i = 6
# met_lung[[i]]$tumor <- "stroma"
# plots[[i]]

# # Use this code, changing cluster numbers, to designate tumor cells.
# met_lung[[i]]$tumor[met_lung[[i]]$seurat_clusters == 9] <- "tumor"

# # Check result of tumor designation and save a list of tumor assignments.
# r_dim_plot(met_lung[[i]], "Tumor vs. Stroma", group.by = "tumor")
# qs::qsave(met_lung[[i]]$tumor,
#     paste0("misc/", names(met_lung)[i], "-tumor_assignments.qs"))

# Separate the tumor cells from the lung stroma
met_stroma <- lapply(seq_along(met_lung), function (i) {
    met_lung[[i]]$tumor <- qs::qread(file = paste0(
        "misc/",
        names(met_lung)[i],
        "-tumor_assignments.qs"))
    s <- subset(met_lung[[i]], tumor == "stroma")
    return(s)
})

names(met_stroma) <- names(met_lung)
```

# Combine datasets from normal and met

```{r}
# Adjust names of some meta to match our lab standards and simplify
for(i in seq_along(normal_lung)) {
    normal_lung[[i]]$id <- normal_lung[[i]]$Sample_Name
    normal_lung[[i]]$src <- normal_lung[[i]]$Sample_Source
    normal_lung[[i]]$type <- normal_lung[[i]]$Sample_Type
    normal_lung[[i]]$method <- "cell"
    normal_lung[[i]]@meta.data <- normal_lung[[i]]@meta.data %>%
        select(nCount_RNA, nFeature_RNA, percent.mt, id, src, type, method,
        manual_annotation_1, annotation_level_1, annotation_level_2, lineage)
}

# Merge the normal and metastatic lung data into a single object
param <- BiocParallel::MulticoreParam(workers = parallelly::availableCores() - 1)

lungs <- merge(normal_lung[[1]],
        c(normal_lung[2:length(normal_lung)], met_stroma),
        add.cell.ids = c(names(normal_lung), names(met_stroma))) %>%
    SCTransform() %>%
    RunPCA(npcs = 30, verbose = FALSE) %>%
    harmony::RunHarmony(group.by.vars = c("id")) %>%
    RunUMAP(reduction = "harmony", dims = 1:30) %>%
    FindNeighbors(reduction = "harmony") %>%
    FindClusters(resolution = 0.1) %>%
    annotate(BPPARAM = param)

qs::qsave(lungs, "output/rdata/integrated_lungs_sct.qs")

r_dim_plot(lungs, group.by = "id", split.by = "type", shuffle = TRUE)
r_dim_plot(lungs, "Integrated Stroma")
r_dim_plot(lungs, group.by = "")
DimPlot(lungs, group.by = "annotations", label = TRUE) + theme(legend.position = "none")

# Label clusters by most frequent assignment
assign_table <- lungs@meta.data %>%
    select(seurat_clusters, annotations) %>%
    group_by(seurat_clusters, annotations) %>%
    summarise(n = n()) %>%
    arrange(seurat_clusters, -n)
```


```{r}

```