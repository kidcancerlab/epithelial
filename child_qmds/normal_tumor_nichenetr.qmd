## Read in required data for normal/tumor nichenetr analysis
```{r normal_tumor_read}
#| cache.vars: mouse_data
murine_aec <-
    qs::qread("output/rdata/murine_aec_post-filtering.qs") %>%
    RenameIdents(
        `0` = "DATP",
        `1` = "AEC2",
        `2` = "DATP",
        `3` = "pAEC2",
        `4` = "cAEC2",
        `5` = "AEC1",
        `6` = "cAEC2"
    ) %>%
    subset(sample_name == "S0066" | sample_name == "S0068")
murine_aec$cell_type_fine <- Idents(murine_aec)

b6_f420_combined_all <-
    qs::qread("output_old/rdata/b6_f420_combined_all.qs") %>%
    AddMetaData(qs::qread("misc/b6_f420_assignments.qs"))

DefaultAssay(b6_f420_combined_all) <- "RNA"
Idents(b6_f420_combined_all) <- "cell_type_final"

f420_cells <-
    qs::qread("output/rdata/sobj_list.qs")[["F420"]] %>%
    AddMetaData(
        qs::qread("misc/b6_f420_assignments.qs") %>%
            rownames_to_column("cells") %>%
            filter(grepl("F420", cells)) %>%
            mutate(cells = str_remove(cells, ".+_")) %>%
            column_to_rownames("cells")
    ) %>%
    subset(cell_type_final == "F420")

mouse_data <-
    subset(
        b6_f420_combined_all,
        idents = c(
            "Monocyte/Macrophage",
            "Alveolar macrophage",
            "T/NK cell",
            "B cell",
            "Dendritic cell"
        )
    ) %>%
    merge(y = list(murine_aec, f420_cells)) %>%
    process_seurat() %>%
    JoinLayers()

Idents(mouse_data) <- "cell_type_final"
mouse_data[["SCT"]] <- NULL

r_dim_plot(
    mouse_data,
    group.by = "cell_type_final",
    label = TRUE,
    split.by = "obj_name"
)
```

## Prep nichenetr reference data
```{r prep_nichenetr}
#| cache.vars: c("lr_network", "ligand_target_matrix", "weighted_networks_lr")
rrrSingleCellUtils:::load_lig_receptor_data()
lr_network <-
    rrrSingleCellUtils:::rrr_env$lr_network_strict %>%
    mutate(from = nichenetr::convert_human_to_mouse_symbols(from),
           to = nichenetr::convert_human_to_mouse_symbols(to)) %>%
    drop_na()

ligand_target_matrix <-
    rrrSingleCellUtils:::rrr_env$ligand_target_matrix

colnames(ligand_target_matrix) <-
    ligand_target_matrix %>%
    colnames() %>%
    convert_human_to_mouse_symbols()

rownames(ligand_target_matrix) <-
    ligand_target_matrix %>%
    rownames() %>%
    convert_human_to_mouse_symbols()

ligand_target_matrix <-
    ligand_target_matrix %>%
    .[!is.na(rownames(ligand_target_matrix)),
        !is.na(colnames(ligand_target_matrix))]

weighted_networks_lr <-
    rrrSingleCellUtils:::rrr_env$weighted_networks_lr %>%
    mutate(from = convert_human_to_mouse_symbols(from),
           to = convert_human_to_mouse_symbols(to)) %>%
    drop_na()
```

## Calculate DE between primary and met F420 to get DE list to use for nichenetr
```{r f420_de}
sobj_list <- qs::qread("output/rdata/sobj_list.qs")

tibia_f420 <-
    sobj_list$tibia_F420

ref_path <- "/home/gdrobertslab/lab/GenRef/sc_ref_datasets/mouse"
mouse_lung_ref <- qs::qread(paste0(ref_path, "/GSE151974/mouse_lung_ref.qs"))
tumor_ref <- qs::qread("output/rdata/f420_reference.qs")
mouse_immune <- celldex::ImmGenData()
# This label is not informative
mouse_immune <-
    mouse_immune[mouse_immune$label.main != "Stromal cells", ]
mouse_rna <- celldex::MouseRNAseqData()

cell_assign <-
    SingleR::SingleR(
        as.SingleCellExperiment(tibia_f420),
        ref = list(
            GetAssayData(mouse_lung_ref),
            mouse_immune,
            mouse_rna,
            GetAssayData(tumor_ref)
        ),
        labels = list(
            mouse_lung_ref$cell_type,
            mouse_immune$label.main,
            mouse_rna$label.fine,
            tumor_ref$cell_type
        ),
        aggr.ref = TRUE
    )
tibia_f420$cell_type_final <- cell_assign$labels
tibia_f420$cell_score <- cell_assign$scores %>%
    apply(MARGIN = 1, function(x) max(x, na.rm = TRUE))

DimPlot(
    tibia_f420,
    group.by = c("seurat_clusters", "cell_type_final"),
    label = TRUE,
    repel = TRUE
) +
    NoLegend()

tumor_clusters <-
    table(
        tibia_f420$cell_type_final,
        tibia_f420$seurat_clusters
    ) %>%
    prop.table(margin = 2) %>%
    as.data.frame() %>%
    filter(Var1 == "Tumor" & Freq > 0.9) %>%
    pull(Var2)

tibia_f420 <-
    subset(tibia_f420, seurat_clusters %in% tumor_clusters)

# adding in b6 here so it's easy to add cell IDs to match assignments
b6_f420_combined_t <-
    merge(sobj_list[["F420"]], add.cell.ids = "F420") %>%
    AddMetaData(qs::qread("misc/b6_f420_assignments.qs")) %>%
    merge(
        tibia_f420,
        add.cell.ids = c("tibia", "")
    ) %>%
    JoinLayers() %>%
    subset(cell_type_final == "F420" | cell_type_final == "Tumor") %>%
    process_seurat()

Idents(b6_f420_combined_t) <- "cell_type_final"

celltype_de <- list()
celltype_de[["F420"]] <-
    FindMarkers(
        b6_f420_combined_t,
        ident.1 = "F420 primary tumor in tibia",
        group.by = "sample_description"
    ) %>%
    filter(p_val_adj < 0.05)

plot_name <-
    DimPlot(
        b6_f420_combined_t,
        group.by = "cell_type_final",
        label = TRUE,
        repel = TRUE
    )
ggsave("output/figures/f420_prim_met_dim.png", plot_name, width = 15, height = 10)

plot_name <-
    DimPlot(
        b6_f420_combined_t,
        group.by = "cell_type",
        label = TRUE,
        repel = TRUE
    ) +
    NoLegend()
ggsave("stuff_f420_cell_type_no_legend.png", plot_name, width = 15, height = 10)

plot_name <-
    DimPlot(
        b6_f420_combined_t,
        split.by = "sample_name",
        cells.highlight = WhichCells(b6_f420_combined_t, idents = "F420")
    )

ggsave("stuff_f420_cells_split.png", plot_name, width = 15, height = 10)

DimPlot(
    b6_f420_combined_t,
    group.by = "cell_type",
    label = TRUE,
    repel = TRUE
) +
    NoLegend()

Idents(b6_f420_combined_t) <- "cell_type"
DimPlot(
    b6_f420_combined_t,
    cells.highlight = WhichCells(b6_f420_combined_t, idents = "F420"),
    split.by = "sample_name"
)
```

```{r nichenetr}
#| cache.vars: nichenet_out
all_cell_types <- unique(mouse_data$cell_type_final)
#not_tumor_cells <- discard(all_cell_types, all_cell_types == "F420")
#celltype_de <- list()

set.seed(1337)

pdf("output/figures/nichenetr/nichenet_junk_plots.pdf")
nichenet_out <-
    parallel::mclapply(
        all_cell_types,
        mc.cores = parallelly::availableCores(),
        mc.preschedule = FALSE,
        function(receiver_cell) {
            sender_cells <-
                grep(
                    receiver_cell,
                    unique(mouse_data$cell_type_final),
                    value = TRUE,
                    invert = TRUE
                )

            subset_data <-
                subset(
                    mouse_data,
                    cell_type_final == receiver_cell
                )

            if (receiver_cell != "F420") {
                celltype_de[[receiver_cell]] <-
                    subset(mouse_data, cell_type_final == receiver_cell) %>%
                    FindMarkers(group.by = "sample",
                                ident.1 = "C57BL6") %>%
                    filter(p_val_adj < 0.05)
            }

            celltype_de[[receiver_cell]] %>%
            rownames_to_column("gene") %>%
            write_tsv(paste0("output/tables/nichenetr/",
                             str_replace(receiver_cell, "/", "_"),
                             "_de.tsv"))

            tumor_upregulated <-
                celltype_de[[receiver_cell]] %>%
                filter(avg_log2FC < 0) %>%
                rownames_to_column("gene") %>%
                pull(gene)

            if (length(tumor_upregulated) < 10) {
                return("Not enough DE genes")
            }

            nichenet_out <-
                find_ligands(
                    mouse_data,
                    stringency = "strict",
                    tumor_upregulated,
                    receiver = receiver_cell,
                    senders = sender_cells,
                    gset_spec = "mouse",
                    rec_spec = "mouse",
                    send_spec = "mouse"
                )

            return(nichenet_out)
        })
dev.off()

names(nichenet_out) <- all_cell_types

qs::qsave(nichenet_out, "output/rdata/nichenetr_out.qs")
```

## Make complex heatmaps from nichenetr output
```{r}
for (receiver_cell in all_cell_types) {
    if (is.list(nichenet_out[[receiver_cell]])) {
        plot_name <-
            plot_complex_heatmap(nichenet_out[[receiver_cell]]) +
            labs(
                title = paste(
                    "Nichenetr results where",
                    receiver_cell,
                    "is the receiver cell"
                )
            )

        ggsave(
            paste0("output/figures/nichenetr/nichenet_heatmap_",
                    str_replace(receiver_cell, "/", "_"),
                    ".pdf"),
            plot_name,
            width = 15,
            height = 6
        )

        qs::qsave(
            plot_name,
            paste0(
                "output/figures/nichenetr/nichenet_heatmap_",
                str_replace(receiver_cell, "/", "_"),
                ".qs"
            )
        )
    } else {
        print(paste(receiver_cell, "-", nichenet_out[[receiver_cell]]))
    }
}
```

## Make the same complexheatmap plots, but only for nint targets
```{r main_complexheatmaps}
nint_receptors <-
    c(
        "Fgfr1", "Fgfr2", "Fgfr3", "Fgfr4",
        "Pdgfra", "Pdgfrb",
        "Src",
        "Flt1", # VEGFR1
        "Kdr", # VEGFR2
        "Flt4", # VEGFR3
        "Flt3",
        "Lck",
        "Lyn"
    )

nint_ligands <-
    rrrSingleCellUtils:::rrr_env$lr_network_strict %>%
    mutate(from = nichenetr::convert_human_to_mouse_symbols(from),
           to = nichenetr::convert_human_to_mouse_symbols(to)) %>%
    filter(to %in% nint_receptors) %>%
    select(-source, -database) %>%
    dplyr::rename(ligand = "from", receptor = "to") %>%
    pull(ligand) %>%
    unique()

slot_1_data <- data.frame(id = character())
slot_2_data <- data.frame(id = character())
slot_4_data <- data.frame(y = ordered())

score_cutoff <- 0.2

for (receiver_cell in all_cell_types) {
    if (is.list(nichenet_out[[receiver_cell]])) {
        sub_nichenetr <- nichenet_out[[receiver_cell]]

        slot_4_data <-
            rbind(
                slot_4_data,
                filter(sub_nichenetr[[4]]$data, x %in% nint_receptors &
                       y %in% nint_ligands &
                       score > score_cutoff) %>%
                    mutate(x = paste(receiver_cell, x))
            )

        sub_nichenetr[[1]]$data <-
            filter(sub_nichenetr[[1]]$data, features.plot %in% nint_ligands)

        slot_1_data <-
            rbind(slot_1_data, sub_nichenetr[[1]]$data)

        sub_nichenetr[[2]]$data <-
            filter(
                sub_nichenetr[[2]]$data,
                features.plot %in% nint_receptors
            ) %>%
            mutate(id = "Receptor Expression")

        if (nrow(sub_nichenetr[[2]]$data) > 0) {
            rownames(sub_nichenetr[[2]]$data) <-
                paste(receiver_cell, rownames(sub_nichenetr[[2]]$data))

            slot_2_data <-
                rbind(
                    slot_2_data,
                    mutate(
                        sub_nichenetr[[2]]$data,
                        features.plot = paste(receiver_cell, features.plot)
                    )
                )
        }

    } else {
        print(paste(receiver_cell, "-", nichenet_out[[receiver_cell]]))
    }
}

# Pf4 had really low scores (~0.02) and was filtered out of slot_4_data, but not
# from slot_1_data, so we're doing it here
slot_1_data <-
    filter(slot_1_data,
           features.plot %in% slot_4_data$y)
holder_list <-
    list(
        list(data = slot_1_data),
        list(data = slot_2_data),
        NULL,
        list(data = slot_4_data)
    )

plot_name <-
    plot_complex_heatmap(holder_list) +
    theme(legend.direction = "vertical", legend.box = "horizontal")

ggsave(
    "output/figures/nichenetr/nichenet_heatmap_main.pdf",
    plot_name,
    width = 7,
    height = 5
)
```

```{r}
ligand_receptors <-
    rrrSingleCellUtils:::rrr_env$lr_network_strict %>%
    mutate(from = nichenetr::convert_human_to_mouse_symbols(from),
           to = nichenetr::convert_human_to_mouse_symbols(to)) %>%
    filter(to %in% nint_receptors) %>%
    select(-source, -database) %>%
    dplyr::rename(ligand = "from", receptor = "to")

nint_ligands <- unique(ligand_receptors$ligand)

int_score_min <- 0.2

Idents(mouse_data) <- "cell_type_final"

expressed_receptors <- list()
for (receiver_cell in all_cell_types) {
    if (is.list(nichenet_out[[receiver_cell]])) {
        nn_receptors <-
            nichenet_out[[receiver_cell]][[7]] %>%
            rownames()
        nn_nint_receptors <- nn_receptors[nn_receptors %in% nint_receptors]

        # Get ligands upstream of nn_nint_receptors
        nn_nint_ligands_receptor <-
            nichenet_out[[receiver_cell]][[7]] %>%
            as.data.frame() %>%
            rownames_to_column("receptor") %>%
            pivot_longer(
                -receptor,
                names_to = "ligand",
                values_to = "weight"
            ) %>%
            filter(receptor %in% nn_nint_receptors & weight > int_score_min) %>%
            mutate(receiver_cell = receiver_cell)

        expressed_receptors[[receiver_cell]] <- nn_nint_ligands_receptor
    }
}

nn_receptor_ligands <-
    bind_rows(expressed_receptors)

sub_l_t_mat <-
    ligand_target_matrix[, unique(c(nn_receptor_ligands$ligand, "Pdgfa", "Pdgfb"))] %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    pivot_longer(
        -gene,
        names_to = "ligand",
        values_to = "score"
    )

score_cutoff <- 0.002

sub_l_t_mat %>%
    ggplot(aes(x = score)) +
    geom_histogram(bins = 200) +
    facet_wrap(~ ligand, ncol = 1) +
    scale_x_log10() +
    geom_vline(xintercept = score_cutoff)

sub_l_t_mat <-
    sub_l_t_mat %>%
    filter(score > score_cutoff)

gene_lists <-
    sub_l_t_mat %>%
    select(-score) %>%
    pivot_wider(names_from = ligand, values_from = gene) %>%
    as.list()

gene_lists <-
    list(
        Fgf1_downstream = gene_lists$Fgf1[[1]],
        Vegfa_downstream = gene_lists$Vegfa[[1]],
        Pdgfa_downstream = gene_lists$Pdgfa[[1]],
        Pdgfb_downstream = gene_lists$Pdgfb[[1]]
    )

qs::qsave(gene_lists, "output/rdata/nichenetr_gene_lists.qs")

mouse_data <-
    AddModuleScore(
        mouse_data,
        features = gene_lists,
        name = paste0(names(gene_lists), "_")
    )

FeaturePlot(
    mouse_data,
    features = c(
        "Fgf1_downstream_1",
        "Vegfa_downstream_3",
        "Pdgfa_downstream_4",
        "Pdgfb_downstream_5"
    )
)
```

## Gather nuclear data

```{r gather_nuc_data}
james_tams <- qs::qread("output/rdata/nucleus/myeloid_processed.qs")
james_tams$coarse_cell_type <- "TAM"
james_tams$coarse_cell_type[james_tams$james_cell_type == "Interstitial"] <- "IM"

james_epi <- qs::qread("output/rdata/nucleus/new_small_epi.qs")

# In the code that created the myeloid_processed.qs file, the macrophages were
# subset to exclude everything we're bringing back in here
non_james_cells <-
    qs::qread("output/rdata/nucleus/merged_samples.qs") %>%
    subset(
        cells = setdiff(Cells(.), Cells(james_tams)) %>%
            setdiff(Cells(james_epi))
    ) %>%
    subset(coarse_cell_type != "Epithelial")

non_james_cells$treatment <-
    recode(
        non_james_cells$sample_id,
        "S0291" = "Control",
        "S0283" = "Late Nintedanib",
        "S0284" = "Early Nintedanib"
    )

non_james_cells$coarse_cell_type[non_james_cells$sn_cell_type == "AM"] <- "AM"
non_james_cells$coarse_cell_type[non_james_cells$sn_cell_type == "IM"] <- "IM"

set.seed(1337)
gene_lists$random_genes <- sample(rownames(james_epi), 30)
gene_lists$random_genes_2 <- sample(rownames(james_epi), 100)

epi_myeloid_data <-
    merge(
        james_tams,
        list(james_epi, non_james_cells)
    ) %>%
    process_seurat() %>%
    AddModuleScore(
        features = gene_lists,
        name = paste0(names(gene_lists), "_")
    )

plot_name <-
    DimPlot(
        epi_myeloid_data,
        group.by = "coarse_cell_type",
        split.by = "treatment",
        label = TRUE
    ) +
    NoLegend() +
    coord_fixed()

ggsave(
    "output/figures/nichenetr/epi_myeloid_treatment_dimplot.pdf",
    plot_name,
    width = 15,
    height = 10
)

qs::qsave(
    plot_name,
    "output/figures/nichenetr/epi_myeloid_treatment_dimplot.qs"
)

FeaturePlot(
    epi_myeloid_data,
    features = c(
        "Fgf1_downstream_1",
        "Vegfa_downstream_2",
        "Pdgfa_downstream_3",
        "Pdgfb_downstream_4"
    )
)

VlnPlot(
    epi_myeloid_data,
    features = c(
        "Fgf1_downstream_1",
        "Vegfa_downstream_2",
        "Pdgfa_downstream_3",
        "Pdgfb_downstream_4"),
    split.by = "treatment",
    group.by = "james_cell_type",
    ncol = 1
) +
    theme(legend.position = "top")

aucell_out <-
    AUCell::AUCell_run(GetAssayData(epi_myeloid_data), gene_lists) %>%
    AUCell::getAUC() %>%
    as.data.frame() %>%
    t()

epi_myeloid_data <- AddMetaData(epi_myeloid_data, aucell_out)

plot_name <-
    VlnPlot(
        epi_myeloid_data,
        features = c(
            "Fgf1_downstream",
            "Vegfa_downstream",
            "Pdgfa_downstream",
            "Pdgfb_downstream",
            "random_genes"),
        split.by = "treatment",
        group.by = "coarse_cell_type",
        ncol = 1
    ) +
        theme(legend.position = "top")

ggsave(
    "output/figures/nichenetr/epi_myeloid_treatment_aucell_vln.pdf",
    plot_name,
    width = 10,
    height = 15
)
qs::qsave(
    plot_name,
    "output/figures/nichenetr/epi_myeloid_treatment_aucell_vln.qs"
)

epi_myeloid_data$vln_group <-
    epi_myeloid_data$coarse_cell_type %>%
    str_replace("TAM", "Infiltrating Myeloid") %>%
    str_replace("Mono", "Infiltrating Myeloid") %>%
    str_replace("tumor", "Tumor")

plot_name <-
    epi_myeloid_data %>%
    subset(vln_group %in% c(
        "Tumor",
        "Infiltrating Myeloid",
        "Epithelial")) %>%
    VlnPlot(
        features = c(
            "Fgf1_downstream",
            "Vegfa_downstream",
            "Pdgfa_downstream",
            "Pdgfb_downstream"),
        split.by = "treatment",
        group.by = "vln_group",
        ncol = 1
    ) +
        theme(legend.position = "top")

ggsave(
    "output/figures/nichenetr/epi_myeloid_treatment_aucell_vln_main.pdf",
    plot_name,
    width = 10,
    height = 15
)
qs::qsave(
    plot_name,
    "output/figures/nichenetr/epi_myeloid_treatment_aucell_vln_main.qs"
)

FeaturePlot(epi_myeloid_data, features = c("Fgf1_downstream", "Vegfa_downstream"))
```

## Try doing statistical analysis on the AUCell data
```{r}
output <- data.frame(cell_type = character())
min_cells <- 20

for (downstream_targets in names(gene_lists)) {
    message(downstream_targets)
    for (second_group in c("Early Nintedanib", "Late Nintedanib")) {
        message(second_group)
        output <-
            parallel::mclapply(
                unique(epi_myeloid_data$coarse_cell_type),
                mc.cores = parallelly::availableCores(),
                mc.preschedule = FALSE,
                function(cell_type) {
                message(cell_type)
                sub_data <-
                    subset(
                        epi_myeloid_data,
                        coarse_cell_type == cell_type &
                            treatment %in% c("Control", second_group),
                        seed = sample(1:1000000)
                    )

                stuff <-
                    data.frame(
                        cell_type = cell_type,
                        downstream_targets = downstream_targets,
                        group_1 = "Control",
                        group_2 = second_group
                    )

                if (min(table(sub_data$treatment)) > min_cells) {
                    stuff$p_val <-
                        t.test(
                            get(downstream_targets) ~ treatment,
                            data = sub_data@meta.data
                        )$p.value

                    stuff$eff_size <-
                        effsize::cohen.d(
                            get(downstream_targets) ~ treatment,
                            data = sub_data@meta.data
                        )$estimate
                }

                return(stuff)
            }) %>%
            bind_rows(output)

        sub_data <-
            subset(
                epi_myeloid_data,
                vln_group == "Infiltrating Myeloid" &
                    treatment %in% c("Control", second_group),
                seed = sample(1:1000000)
            )

        stuff <-
            data.frame(
                cell_type = "Infiltrating Myeloid",
                downstream_targets = downstream_targets,
                group_1 = "Control",
                group_2 = second_group
            )

        stuff$p_val <-
            t.test(
                get(downstream_targets) ~ treatment,
                data = sub_data@meta.data
            )$p.value

        stuff$eff_size <-
            effsize::cohen.d(
                get(downstream_targets) ~ treatment,
                data = sub_data@meta.data
            )$estimate

        output <- bind_rows(output, stuff)

    }
}

output$fdr_value <- qvalue::qvalue(output$p_val)$qvalue

# FDR correction

write_tsv(output, "output/tables/nichenetr/nichenetr_effect_pvals.tsv")
```
